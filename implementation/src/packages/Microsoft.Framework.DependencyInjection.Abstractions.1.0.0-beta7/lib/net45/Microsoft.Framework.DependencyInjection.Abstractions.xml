<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Framework.DependencyInjection.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Framework.DependencyInjection.ActivatorUtilities">
            <summary>
            Helper code for the various activator services.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ActivatorUtilities.CreateInstance(System.IServiceProvider,System.Type,System.Object[])">
            <summary>
            Instantiate a type with constructor arguments provided directly and/or from an <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="provider">The service provider used to resolve dependencies</param>
            <param name="instanceType">The type to activate</param>
            <param name="parameters">Constructor arguments not provided by the <see cref="!:provider"/></param>
            <returns>An activated object of type instanceType</returns>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ActivatorUtilities.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a delegate that will instantiate a type with constructor arguments provided directly
            and/or from an <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="instanceType">The type to activate</param>
            <param name="argumentTypes">
            The types of objects, in order, that will be passed to the returned function as its second parameter
            </param>
            <returns>
            A factory that will instantiate instanceType using an <see cref="T:System.IServiceProvider"/>
            and an argument array containing objects matching the types defined in argumentTypes
            </returns>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ActivatorUtilities.CreateInstance``1(System.IServiceProvider,System.Object[])">
            <summary>
            Instantiate a type with constructor arguments provided directly and/or from an <see cref="T:System.IServiceProvider"/>.
            </summary>
            <typeparam name="T">The type to activate</typeparam>
            <param name="provider">The service provider used to resolve dependencies</param>
            <param name="parameters">Constructor arguments not provided by the <see cref="!:provider"/></param>
            <returns>An activated object of type T</returns>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance``1(System.IServiceProvider)">
            <summary>
            Retrieve an instance of the given type from the service provider. If one is not found then instantiate it directly.
            </summary>
            <typeparam name="T">The type of the service</typeparam>
            <param name="provider">The service provider used to resolve dependencies</param>
            <returns>The resolved service or created instance</returns>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ActivatorUtilities.GetServiceOrCreateInstance(System.IServiceProvider,System.Type)">
            <summary>
            Retrieve an instance of the given type from the service provider. If one is not found then instantiate it directly.
            </summary>
            <param name="activator">The type activator</param>
            <param name="type">The type of the service</param>
            <returns>The resolved service or created instance</returns>
        </member>
        <member name="T:Microsoft.Framework.DependencyInjection.IServiceCollection">
            <summary>
            Specifies the contract for a collection of service descriptors.
            </summary>
        </member>
        <member name="T:Microsoft.Framework.DependencyInjection.IServiceScope">
            <summary>
            The <see cref="M:System.IDisposable.Dispose"/> method ends the scope lifetime. Once Dispose
            is called, any scoped services that have been resolved from
            <see cref="P:Microsoft.Framework.DependencyInjection.IServiceScope.ServiceProvider"/> will be
            disposed.
            </summary>
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.IServiceScope.ServiceProvider">
            <summary>
            The <see cref="T:System.IServiceProvider"/> used to resolve dependencies from the scope.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.IServiceScopeFactory.CreateScope">
            <summary>
            Create an <see cref="T:Microsoft.Framework.DependencyInjection.IServiceScope"/> which
            contains an <see cref="T:System.IServiceProvider"/> used to resolve dependencies from a
            newly created scope.
            </summary>
            <returns>
            An <see cref="T:Microsoft.Framework.DependencyInjection.IServiceScope"/> controlling the
            lifetime of the scope. Once this is disposed, any scoped services that have been resolved
            from the <see cref="P:Microsoft.Framework.DependencyInjection.IServiceScope.ServiceProvider"/>
            will also be disposed.
            </returns>
        </member>
        <member name="T:Microsoft.Framework.DependencyInjection.ObjectFactory">
            <summary>
            The result of <see cref="M:Microsoft.Framework.DependencyInjection.ActivatorUtilities.CreateFactory(System.Type,System.Type[])"/>.
            </summary>
            <param name="serviceProvider">The <see cref="T:System.IServiceProvider"/> to get service arguments from.</param>
            <param name="arguments">Additional constructor arguments.</param>
            <returns>The instantiated type.</returns>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ServiceDescriptor.#ctor(System.Type,System.Type,Microsoft.Framework.DependencyInjection.ServiceLifetime)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Framework.DependencyInjection.ServiceDescriptor"/> with the specified <paramref name="implementationType"/>.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the service.</param>
            <param name="implementationType">The <see cref="T:System.Type"/> implementing the service.</param>
            <param name="lifetime">The <see cref="T:Microsoft.Framework.DependencyInjection.ServiceLifetime"/> of the service.</param>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ServiceDescriptor.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Framework.DependencyInjection.ServiceDescriptor"/> with the specified <paramref name="instance"/>
            as a <see cref="F:Microsoft.Framework.DependencyInjection.ServiceLifetime.Singleton"/>.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the service.</param>
            <param name="instance">The instance implementing the service.</param>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ServiceDescriptor.#ctor(System.Type,System.Func{System.IServiceProvider,System.Object},Microsoft.Framework.DependencyInjection.ServiceLifetime)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Framework.DependencyInjection.ServiceDescriptor"/> with the specified <paramref name="factory"/>.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the service.</param>
            <param name="factory">A factory used for creating service instances.</param>
            <param name="lifetime">The <see cref="T:Microsoft.Framework.DependencyInjection.ServiceLifetime"/> of the service.</param>
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.ServiceDescriptor.Lifetime">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.ServiceDescriptor.ServiceType">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.ServiceDescriptor.ImplementationType">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.ServiceDescriptor.ImplementationInstance">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.ServiceDescriptor.ImplementationFactory">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ServiceProviderExtensions.GetService``1(System.IServiceProvider)">
            <summary>
            Get service of type <typeparamref name="T"/> from the <see cref="T:System.IServiceProvider"/>.
            </summary>
            <typeparam name="T">The type of service object to get.</typeparam>
            <param name="provider">The <see cref="T:System.IServiceProvider"/> to retrieve the service object from.</param>
            <returns>A service object of type <typeparamref name="T"/> or null if there is no such service.</returns>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ServiceProviderExtensions.GetRequiredService(System.IServiceProvider,System.Type)">
            <summary>
            Get service of type <paramref name="serviceType"/> from the <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="provider">The <see cref="T:System.IServiceProvider"/> to retrieve the service object from.</param>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type <paramref name="serviceType"/>.</returns>
            <exception cref="T:System.InvalidOperationException">There is no service of type <paramref name="serviceType"/>.</exception>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ServiceProviderExtensions.GetRequiredService``1(System.IServiceProvider)">
            <summary>
            Get service of type <typeparamref name="T"/> from the <see cref="T:System.IServiceProvider"/>.
            </summary>
            <typeparam name="T">The type of service object to get.</typeparam>
            <param name="provider">The <see cref="T:System.IServiceProvider"/> to retrieve the service object from.</param>
            <returns>A service object of type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.InvalidOperationException">There is no service of type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ServiceProviderExtensions.GetServices``1(System.IServiceProvider)">
            <summary>
            Get an enumeration of services of type <typeparamref name="T"/> from the <see cref="T:System.IServiceProvider"/>.
            </summary>
            <typeparam name="T">The type of service object to get.</typeparam>
            <param name="provider">The <see cref="T:System.IServiceProvider"/> to retrieve the services from.</param>
            <returns>An enumeration of services of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.ServiceProviderExtensions.GetServices(System.IServiceProvider,System.Type)">
            <summary>
            Get an enumeration of services of type <paramref name="serviceType"/> from the <see cref="T:System.IServiceProvider"/>.
            </summary>
            <param name="provider">The <see cref="T:System.IServiceProvider"/> to retrieve the services from.</param>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>An enumeration of services of type <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.Extensions.ServiceCollectionExtensions.Add(Microsoft.Framework.DependencyInjection.IServiceCollection,Microsoft.Framework.DependencyInjection.ServiceDescriptor)">
            <summary>
            Adds the specified <paramref name="descriptor"/> to the <paramref name="collection"/>.
            </summary>
            <param name="collection">The <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection"/>.</param>
            <param name="descriptor">The <see cref="T:Microsoft.Framework.DependencyInjection.ServiceDescriptor"/>.</param>
            <returns>A reference to the current instance of <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection"/>.</returns>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.Extensions.ServiceCollectionExtensions.Add(Microsoft.Framework.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Framework.DependencyInjection.ServiceDescriptor})">
            <summary>
            Adds a sequence of <see cref="T:Microsoft.Framework.DependencyInjection.ServiceDescriptor"/> to the <paramref name="collection"/>.
            </summary>
            <param name="collection">The <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection"/>.</param>
            <param name="descriptors">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Microsoft.Framework.DependencyInjection.ServiceDescriptor"/>s to add.</param>
            <returns>A reference to the current instance of <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection"/>.</returns>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAdd(Microsoft.Framework.DependencyInjection.IServiceCollection,Microsoft.Framework.DependencyInjection.ServiceDescriptor)">
            <summary>
            Adds the specified <paramref name="descriptor"/> to the <paramref name="collection"/> if the
            service type hasn't been already registered.
            </summary>
            <param name="collection">The <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection"/>.</param>
            <param name="descriptor">The <see cref="T:Microsoft.Framework.DependencyInjection.ServiceDescriptor"/>.</param>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAdd(Microsoft.Framework.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Framework.DependencyInjection.ServiceDescriptor})">
            <summary>
            Adds the specified <paramref name="descriptors"/> to the <paramref name="collection"/> if the
            service type hasn't been already registered.
            </summary>
            <param name="collection">The <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection"/>.</param>
            <param name="descriptors">The <see cref="T:Microsoft.Framework.DependencyInjection.ServiceDescriptor"/>s.</param>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddEnumerable(Microsoft.Framework.DependencyInjection.IServiceCollection,Microsoft.Framework.DependencyInjection.ServiceDescriptor)">
            <summary>
            Adds a <see cref="T:Microsoft.Framework.DependencyInjection.ServiceDescriptor"/> if an existing descriptor with the same
            <see cref="P:Microsoft.Framework.DependencyInjection.ServiceDescriptor.ServiceType"/> and an implementation that does not already exist
            in <paramref name="services.."/>.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection"/>.</param>
            <param name="descriptor">The <see cref="T:Microsoft.Framework.DependencyInjection.ServiceDescriptor"/>.</param>
            <remarks>
            Use <see cref="M:Microsoft.Framework.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddEnumerable(Microsoft.Framework.DependencyInjection.IServiceCollection,Microsoft.Framework.DependencyInjection.ServiceDescriptor)"/> when registing a service implementation of a
            service type that
            supports multiple registrations of the same service type. Using
            <see cref="M:Microsoft.Framework.DependencyInjection.Extensions.ServiceCollectionExtensions.Add(Microsoft.Framework.DependencyInjection.IServiceCollection,Microsoft.Framework.DependencyInjection.ServiceDescriptor)"/> is not idempotent and can add
            duplicate
            <see cref="T:Microsoft.Framework.DependencyInjection.ServiceDescriptor"/> instances if called twice. Using
            <see cref="M:Microsoft.Framework.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddEnumerable(Microsoft.Framework.DependencyInjection.IServiceCollection,Microsoft.Framework.DependencyInjection.ServiceDescriptor)"/> will prevent registration
            of multiple implementation types.
            </remarks>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddEnumerable(Microsoft.Framework.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{Microsoft.Framework.DependencyInjection.ServiceDescriptor})">
            <summary>
            Adds the specified <see cref="T:Microsoft.Framework.DependencyInjection.ServiceDescriptor"/>s if an existing descriptor with the same
            <see cref="P:Microsoft.Framework.DependencyInjection.ServiceDescriptor.ServiceType"/> and an implementation that does not already exist
            in <paramref name="services.."/>.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection"/>.</param>
            <param name="descriptors">The <see cref="T:Microsoft.Framework.DependencyInjection.ServiceDescriptor"/>s.</param>
            <remarks>
            Use <see cref="M:Microsoft.Framework.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddEnumerable(Microsoft.Framework.DependencyInjection.IServiceCollection,Microsoft.Framework.DependencyInjection.ServiceDescriptor)"/> when registing a service
            implementation of a service type that
            supports multiple registrations of the same service type. Using
            <see cref="M:Microsoft.Framework.DependencyInjection.Extensions.ServiceCollectionExtensions.Add(Microsoft.Framework.DependencyInjection.IServiceCollection,Microsoft.Framework.DependencyInjection.ServiceDescriptor)"/> is not idempotent and can add
            duplicate
            <see cref="T:Microsoft.Framework.DependencyInjection.ServiceDescriptor"/> instances if called twice. Using
            <see cref="M:Microsoft.Framework.DependencyInjection.Extensions.ServiceCollectionExtensions.TryAddEnumerable(Microsoft.Framework.DependencyInjection.IServiceCollection,Microsoft.Framework.DependencyInjection.ServiceDescriptor)"/> will prevent registration
            of multiple implementation types.
            </remarks>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.Extensions.ServiceCollectionExtensions.Replace(Microsoft.Framework.DependencyInjection.IServiceCollection,Microsoft.Framework.DependencyInjection.ServiceDescriptor)">
            <summary>
            Removes the first service in <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection"/> with the same service type
            as <paramref name="descriptor"/> and adds <paramef name="descriptor"/> to the collection.
            </summary>
            <param name="collection">The <see cref="T:Microsoft.Framework.DependencyInjection.IServiceCollection"/>.</param>
            <param name="descriptor">The <see cref="T:Microsoft.Framework.DependencyInjection.ServiceDescriptor"/> to replace with.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.Abstractions.Resources.AmbiguousConstructorMatch">
            <summary>
            Multiple constructors accepting all given argument types have been found in type '{0}'. There should only be one applicable constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.Abstractions.Resources.FormatAmbiguousConstructorMatch(System.Object)">
            <summary>
            Multiple constructors accepting all given argument types have been found in type '{0}'. There should only be one applicable constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.Abstractions.Resources.CannotLocateImplementation">
            <summary>
            Unable to locate implementation '{0}' for service '{1}'.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.Abstractions.Resources.FormatCannotLocateImplementation(System.Object,System.Object)">
            <summary>
            Unable to locate implementation '{0}' for service '{1}'.
            </summary>
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.Abstractions.Resources.CannotResolveService">
            <summary>
            Unable to resolve service for type '{0}' while attempting to activate '{1}'.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.Abstractions.Resources.FormatCannotResolveService(System.Object,System.Object)">
            <summary>
            Unable to resolve service for type '{0}' while attempting to activate '{1}'.
            </summary>
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.Abstractions.Resources.NoConstructorMatch">
            <summary>
            Unable to locate suitable constructor for type '{0}'. Ensure the type is concrete and all parameters are accepted by a constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.Abstractions.Resources.FormatNoConstructorMatch(System.Object)">
            <summary>
            Unable to locate suitable constructor for type '{0}'. Ensure the type is concrete and all parameters are accepted by a constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.Abstractions.Resources.NoImplementation">
            <summary>
            Service type '{0}' has been registered without an implementation type.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.Abstractions.Resources.FormatNoImplementation(System.Object)">
            <summary>
            Service type '{0}' has been registered without an implementation type.
            </summary>
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.Abstractions.Resources.NoServiceRegistered">
            <summary>
            No service for type '{0}' has been registered.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.Abstractions.Resources.FormatNoServiceRegistered(System.Object)">
            <summary>
            No service for type '{0}' has been registered.
            </summary>
        </member>
        <member name="P:Microsoft.Framework.DependencyInjection.Abstractions.Resources.TryAddIndistinguishableTypeToEnumerable">
            <summary>
            Implementation type cannot be '{0}' because it is indistinguishable from other services registered for '{1}'.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.DependencyInjection.Abstractions.Resources.FormatTryAddIndistinguishableTypeToEnumerable(System.Object,System.Object)">
            <summary>
            Implementation type cannot be '{0}' because it is indistinguishable from other services registered for '{1}'.
            </summary>
        </member>
    </members>
</doc>
